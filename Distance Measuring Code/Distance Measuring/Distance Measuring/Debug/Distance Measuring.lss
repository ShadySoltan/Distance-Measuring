
Distance Measuring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000112a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000112a  000011be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000a8  008000a8  00001206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020c5  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c42  00000000  00000000  000034c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f65  00000000  00000000  00004103  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00005068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c5a  00000000  00000000  00005394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001117  00000000  00000000  00005fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00007105  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c1 04 	jmp	0x982	; 0x982 <__vector_8>
      24:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__vector_8+0x2c>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <DIO_ReadPort+0x14>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <Ultrasonic_Read+0x90>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <LCD_Cmd+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea e2       	ldi	r30, 0x2A	; 42
     162:	f1 e1       	ldi	r31, 0x11	; 17
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a8 3a       	cpi	r26, 0xA8	; 168
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	a8 ea       	ldi	r26, 0xA8	; 168
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a0 3b       	cpi	r26, 0xB0	; 176
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 11 02 	call	0x422	; 0x422 <main>
     184:	0c 94 93 08 	jmp	0x1126	; 0x1126 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <LCD_Cmd>:
	LCD_Cmd(0x32);
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
	LCD_Cmd(0x06);//Entry Mode move to right
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
}
void LCD_Cmd(u8 cmd){
     18c:	cf 93       	push	r28
     18e:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_Low);
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	89 e0       	ldi	r24, 0x09	; 9
     194:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	0e 94 43 03 	call	0x686	; 0x686 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd & 0xF0);
     19e:	8f 70       	andi	r24, 0x0F	; 15
     1a0:	9c 2f       	mov	r25, r28
     1a2:	90 7f       	andi	r25, 0xF0	; 240
     1a4:	68 2f       	mov	r22, r24
     1a6:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	8b e0       	ldi	r24, 0x0B	; 11
     1b2:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b6:	8f e8       	ldi	r24, 0x8F	; 143
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_Cmd+0x2e>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_Cmd+0x34>
     1c0:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	8b e0       	ldi	r24, 0x0B	; 11
     1c6:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ca:	8f e1       	ldi	r24, 0x1F	; 31
     1cc:	9e e4       	ldi	r25, 0x4E	; 78
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_Cmd+0x42>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_Cmd+0x48>
     1d4:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	0e 94 43 03 	call	0x686	; 0x686 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd << 4);
     1dc:	90 e1       	ldi	r25, 0x10	; 16
     1de:	c9 9f       	mul	r28, r25
     1e0:	90 01       	movw	r18, r0
     1e2:	11 24       	eor	r1, r1
     1e4:	8f 70       	andi	r24, 0x0F	; 15
     1e6:	68 2f       	mov	r22, r24
     1e8:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	8b e0       	ldi	r24, 0x0B	; 11
     1f4:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f8:	8f e8       	ldi	r24, 0x8F	; 143
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_Cmd+0x70>
     200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_Cmd+0x76>
     202:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	8b e0       	ldi	r24, 0x0B	; 11
     208:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	8f e3       	ldi	r24, 0x3F	; 63
     20e:	9f e1       	ldi	r25, 0x1F	; 31
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <LCD_Cmd+0x84>
     214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_Cmd+0x8a>
     216:	00 00       	nop
	_delay_ms(2);
}
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <LCD_Init>:
*  Author: user
*/
#include "LCD.h"

void LCD_Init(void){
	DIO_WriteChannel(LCD_RW,STD_Low);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	8a e0       	ldi	r24, 0x0A	; 10
     220:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	8b e0       	ldi	r24, 0x0B	; 11
     228:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
     22c:	2f ef       	ldi	r18, 0xFF	; 255
     22e:	89 ef       	ldi	r24, 0xF9	; 249
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	21 50       	subi	r18, 0x01	; 1
     234:	80 40       	sbci	r24, 0x00	; 0
     236:	90 40       	sbci	r25, 0x00	; 0
     238:	e1 f7       	brne	.-8      	; 0x232 <LCD_Init+0x16>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Init+0x20>
     23c:	00 00       	nop
	_delay_ms(20);
	LCD_Cmd(0x33);
     23e:	83 e3       	ldi	r24, 0x33	; 51
     240:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Cmd>
	LCD_Cmd(0x32);
     244:	82 e3       	ldi	r24, 0x32	; 50
     246:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Cmd>
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
     24a:	88 e2       	ldi	r24, 0x28	; 40
     24c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Cmd>
	LCD_Cmd(0x06);//Entry Mode move to right
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Cmd>
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
     256:	8c e0       	ldi	r24, 0x0C	; 12
     258:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Cmd>
     25c:	08 95       	ret

0000025e <LCD_Char>:
	DIO_WriteChannel(LCD_E,STD_Low);
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_Char(s8 data){
     25e:	cf 93       	push	r28
     260:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_High);
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	89 e0       	ldi	r24, 0x09	; 9
     266:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 43 03 	call	0x686	; 0x686 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data & 0xF0);
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	9c 2f       	mov	r25, r28
     274:	90 7f       	andi	r25, 0xF0	; 240
     276:	68 2f       	mov	r22, r24
     278:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	8b e0       	ldi	r24, 0x0B	; 11
     284:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	8f e8       	ldi	r24, 0x8F	; 143
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_Char+0x2e>
     290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_Char+0x34>
     292:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     29c:	8f e1       	ldi	r24, 0x1F	; 31
     29e:	9e e4       	ldi	r25, 0x4E	; 78
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_Char+0x42>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_Char+0x48>
     2a6:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 43 03 	call	0x686	; 0x686 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data << 4);
     2ae:	90 e1       	ldi	r25, 0x10	; 16
     2b0:	c9 9f       	mul	r28, r25
     2b2:	90 01       	movw	r18, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	8f 70       	andi	r24, 0x0F	; 15
     2b8:	68 2f       	mov	r22, r24
     2ba:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 55 03 	call	0x6aa	; 0x6aa <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	8b e0       	ldi	r24, 0x0B	; 11
     2c6:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ca:	8f e8       	ldi	r24, 0x8F	; 143
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_Char+0x70>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_Char+0x76>
     2d4:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	8b e0       	ldi	r24, 0x0B	; 11
     2da:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2de:	8f e3       	ldi	r24, 0x3F	; 63
     2e0:	9f e1       	ldi	r25, 0x1F	; 31
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_Char+0x84>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_Char+0x8a>
     2e8:	00 00       	nop
	_delay_ms(2);
}
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <LCD_String>:
void LCD_String(s8 * string){
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	8c 01       	movw	r16, r24
	u8 i = 0;
     2f6:	c0 e0       	ldi	r28, 0x00	; 0
	while (string[i] != '\0')
     2f8:	03 c0       	rjmp	.+6      	; 0x300 <LCD_String+0x12>
	{
		LCD_Char(string[i]);
     2fa:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Char>
		i++;
     2fe:	cf 5f       	subi	r28, 0xFF	; 255
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_String(s8 * string){
	u8 i = 0;
	while (string[i] != '\0')
     300:	f8 01       	movw	r30, r16
     302:	ec 0f       	add	r30, r28
     304:	f1 1d       	adc	r31, r1
     306:	80 81       	ld	r24, Z
     308:	81 11       	cpse	r24, r1
     30a:	f7 cf       	rjmp	.-18     	; 0x2fa <LCD_String+0xc>
	{
		LCD_Char(string[i]);
		i++;
	}
}
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	08 95       	ret

00000314 <TIMER1_OVHandler>:
	double distance = (double)0.0686*count;//N=64 , SoundSpeed = 34300 , F_CPU = 16000000
	return distance;
}

void TIMER1_OVHandler(){
	OV_Count++;
     314:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     318:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__data_end+0x1>
     31c:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <__data_end+0x2>
     320:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <__data_end+0x3>
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	a1 1d       	adc	r26, r1
     328:	b1 1d       	adc	r27, r1
     32a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
     32e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__data_end+0x1>
     332:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <__data_end+0x2>
     336:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <__data_end+0x3>
     33a:	08 95       	ret

0000033c <Ultrasonic_Read>:
*/
#include "Ultrasonic.h"

volatile u32 OV_Count = 0;

double Ultrasonic_Read(){
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	28 97       	sbiw	r28, 0x08	; 8
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
	DIO_ConfigChannel(Ultrasonic_Echo_Pin,Input);
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	8e e1       	ldi	r24, 0x1E	; 30
     354:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_ConfigChannel>
	DIO_ConfigChannel(Ultrasonic_Trigger_Pin,Output);
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 c1 02 	call	0x582	; 0x582 <DIO_ConfigChannel>
	GINT_EnableAllInterrupts();
     360:	0e 94 0b 04 	call	0x816	; 0x816 <GINT_EnableAllInterrupts>
	TIMER1_TOVInt_SetCallBack(TIMER1_OVHandler);
     364:	8a e8       	ldi	r24, 0x8A	; 138
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 bc 04 	call	0x978	; 0x978 <TIMER1_TOVInt_SetCallBack>
	TIMER1_InitTypes options = {Normal,Clock_64,COM1A_No_PWM,COM1B_No_PWM,OC1AInt_Disable,OC1BInt_Disable,ICInt_Disable,TOVInt_Enable};
     36c:	88 e0       	ldi	r24, 0x08	; 8
     36e:	e0 ea       	ldi	r30, 0xA0	; 160
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	de 01       	movw	r26, r28
     374:	11 96       	adiw	r26, 0x01	; 1
     376:	01 90       	ld	r0, Z+
     378:	0d 92       	st	X+, r0
     37a:	8a 95       	dec	r24
     37c:	e1 f7       	brne	.-8      	; 0x376 <Ultrasonic_Read+0x3a>
	TIMER1_Init(&options);
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	0e 94 0f 04 	call	0x81e	; 0x81e <TIMER1_Init>

	TIMER1_TCCR1B_Reg.ICES1_Bit = 1;//Rising Edge
     386:	8e b5       	in	r24, 0x2e	; 46
     388:	80 64       	ori	r24, 0x40	; 64
     38a:	8e bd       	out	0x2e, r24	; 46
	
	DIO_WriteChannel(Ultrasonic_Trigger_Pin,STD_High);
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	85 e3       	ldi	r24, 0x35	; 53
     396:	8a 95       	dec	r24
     398:	f1 f7       	brne	.-4      	; 0x396 <Ultrasonic_Read+0x5a>
     39a:	00 00       	nop
	_delay_us(10);
	DIO_WriteChannel(Ultrasonic_Trigger_Pin,STD_Low);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_WriteChannel>
	
	while (GetBit(TIMER1_TIFR_Reg,Ultrasonic_ICF1_Bit) == 0);//waiting Rising Edge
     3a4:	08 b6       	in	r0, 0x38	; 56
     3a6:	05 fe       	sbrs	r0, 5
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <Ultrasonic_Read+0x68>
	TIMER1_TCNT1_Reg = 0;
     3aa:	1d bc       	out	0x2d, r1	; 45
     3ac:	1c bc       	out	0x2c, r1	; 44
	TIMER1_ICR1_Reg = 0;
     3ae:	17 bc       	out	0x27, r1	; 39
     3b0:	16 bc       	out	0x26, r1	; 38
	OV_Count = 0;
     3b2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end>
     3b6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x1>
     3ba:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end+0x2>
     3be:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__data_end+0x3>
	TIMER1_TCCR1B_Reg.ICES1_Bit = 0;//Falling Edge
     3c2:	8e b5       	in	r24, 0x2e	; 46
     3c4:	8f 7b       	andi	r24, 0xBF	; 191
     3c6:	8e bd       	out	0x2e, r24	; 46
	SetBit(TIMER1_TIFR_Reg,Ultrasonic_ICF1_Bit);//Clear the FLag
     3c8:	88 b7       	in	r24, 0x38	; 56
     3ca:	80 62       	ori	r24, 0x20	; 32
     3cc:	88 bf       	out	0x38, r24	; 56
	
	while (GetBit(TIMER1_TIFR_Reg,Ultrasonic_ICF1_Bit) == 0);//waiting Falling Edge
     3ce:	08 b6       	in	r0, 0x38	; 56
     3d0:	05 fe       	sbrs	r0, 5
     3d2:	fd cf       	rjmp	.-6      	; 0x3ce <Ultrasonic_Read+0x92>
	SetBit(TIMER1_TIFR_Reg,Ultrasonic_ICF1_Bit);//Clear the FLag
     3d4:	88 b7       	in	r24, 0x38	; 56
     3d6:	80 62       	ori	r24, 0x20	; 32
     3d8:	88 bf       	out	0x38, r24	; 56
	u32 count = (OV_Count*65536)+TIMER1_ICR1_Reg;
     3da:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
     3de:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__data_end+0x1>
     3e2:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <__data_end+0x2>
     3e6:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <__data_end+0x3>
     3ea:	dc 01       	movw	r26, r24
     3ec:	99 27       	eor	r25, r25
     3ee:	88 27       	eor	r24, r24
     3f0:	26 b5       	in	r18, 0x26	; 38
     3f2:	37 b5       	in	r19, 0x27	; 39
     3f4:	bc 01       	movw	r22, r24
     3f6:	cd 01       	movw	r24, r26
     3f8:	62 0f       	add	r22, r18
     3fa:	73 1f       	adc	r23, r19
     3fc:	81 1d       	adc	r24, r1
     3fe:	91 1d       	adc	r25, r1
	double distance = (double)0.0686*count;//N=64 , SoundSpeed = 34300 , F_CPU = 16000000
     400:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__floatunsisf>
     404:	28 e2       	ldi	r18, 0x28	; 40
     406:	3e e7       	ldi	r19, 0x7E	; 126
     408:	4c e8       	ldi	r20, 0x8C	; 140
     40a:	5d e3       	ldi	r21, 0x3D	; 61
     40c:	0e 94 4c 05 	call	0xa98	; 0xa98 <__mulsf3>
	return distance;
}
     410:	28 96       	adiw	r28, 0x08	; 8
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <main>:
#include "Ultrasonic.h"
#include "LCD.h"
#include <stdlib.h>

int main(void)
{
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	64 97       	sbiw	r28, 0x14	; 20
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
     436:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_Init>
	LCD_Init();
     43a:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_Init>
	s8 distance[20] = {STD_Low};
     43e:	fe 01       	movw	r30, r28
     440:	31 96       	adiw	r30, 0x01	; 1
     442:	84 e1       	ldi	r24, 0x14	; 20
     444:	df 01       	movw	r26, r30
     446:	1d 92       	st	X+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <main+0x24>
	double ddistance = STD_Low;
    while (1) 
    {
		ddistance = Ultrasonic_Read(); // This function return the distance but in double we need to convert it to string first to pring on LCD
     44c:	0e 94 9e 01 	call	0x33c	; 0x33c <Ultrasonic_Read>
		dtostrf(ddistance,2,2,distance);
     450:	8e 01       	movw	r16, r28
     452:	0f 5f       	subi	r16, 0xFF	; 255
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	22 e0       	ldi	r18, 0x02	; 2
     458:	42 e0       	ldi	r20, 0x02	; 2
     45a:	0e 94 0a 06 	call	0xc14	; 0xc14 <dtostrf>
		LCD_String(distance);
     45e:	c8 01       	movw	r24, r16
     460:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     464:	bf ef       	ldi	r27, 0xFF	; 255
     466:	23 ec       	ldi	r18, 0xC3	; 195
     468:	89 e0       	ldi	r24, 0x09	; 9
     46a:	b1 50       	subi	r27, 0x01	; 1
     46c:	20 40       	sbci	r18, 0x00	; 0
     46e:	80 40       	sbci	r24, 0x00	; 0
     470:	e1 f7       	brne	.-8      	; 0x46a <main+0x48>
     472:	00 c0       	rjmp	.+0      	; 0x474 <main+0x52>
     474:	00 00       	nop
		_delay_ms(200);
		LCD_Cmd(0x01);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Cmd>
     47c:	e7 cf       	rjmp	.-50     	; 0x44c <main+0x2a>

0000047e <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
     47e:	98 2f       	mov	r25, r24
     480:	96 95       	lsr	r25
     482:	96 95       	lsr	r25
     484:	96 95       	lsr	r25
     486:	87 70       	andi	r24, 0x07	; 7
     488:	91 30       	cpi	r25, 0x01	; 1
     48a:	21 f1       	breq	.+72     	; 0x4d4 <DIO_WriteChannel+0x56>
     48c:	30 f0       	brcs	.+12     	; 0x49a <DIO_WriteChannel+0x1c>
     48e:	92 30       	cpi	r25, 0x02	; 2
     490:	f1 f1       	breq	.+124    	; 0x50e <DIO_WriteChannel+0x90>
     492:	93 30       	cpi	r25, 0x03	; 3
     494:	09 f4       	brne	.+2      	; 0x498 <DIO_WriteChannel+0x1a>
     496:	58 c0       	rjmp	.+176    	; 0x548 <DIO_WriteChannel+0xca>
     498:	08 95       	ret
     49a:	61 30       	cpi	r22, 0x01	; 1
     49c:	69 f4       	brne	.+26     	; 0x4b8 <DIO_WriteChannel+0x3a>
     49e:	4b b3       	in	r20, 0x1b	; 27
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	b9 01       	movw	r22, r18
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_WriteChannel+0x2e>
     4a8:	66 0f       	add	r22, r22
     4aa:	77 1f       	adc	r23, r23
     4ac:	8a 95       	dec	r24
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_WriteChannel+0x2a>
     4b0:	cb 01       	movw	r24, r22
     4b2:	84 2b       	or	r24, r20
     4b4:	8b bb       	out	0x1b, r24	; 27
     4b6:	08 95       	ret
     4b8:	4b b3       	in	r20, 0x1b	; 27
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	b9 01       	movw	r22, r18
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_WriteChannel+0x48>
     4c2:	66 0f       	add	r22, r22
     4c4:	77 1f       	adc	r23, r23
     4c6:	8a 95       	dec	r24
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_WriteChannel+0x44>
     4ca:	cb 01       	movw	r24, r22
     4cc:	80 95       	com	r24
     4ce:	84 23       	and	r24, r20
     4d0:	8b bb       	out	0x1b, r24	; 27
     4d2:	08 95       	ret
     4d4:	61 30       	cpi	r22, 0x01	; 1
     4d6:	69 f4       	brne	.+26     	; 0x4f2 <DIO_WriteChannel+0x74>
     4d8:	48 b3       	in	r20, 0x18	; 24
     4da:	21 e0       	ldi	r18, 0x01	; 1
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	b9 01       	movw	r22, r18
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_WriteChannel+0x68>
     4e2:	66 0f       	add	r22, r22
     4e4:	77 1f       	adc	r23, r23
     4e6:	8a 95       	dec	r24
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_WriteChannel+0x64>
     4ea:	cb 01       	movw	r24, r22
     4ec:	84 2b       	or	r24, r20
     4ee:	88 bb       	out	0x18, r24	; 24
     4f0:	08 95       	ret
     4f2:	48 b3       	in	r20, 0x18	; 24
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	b9 01       	movw	r22, r18
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_WriteChannel+0x82>
     4fc:	66 0f       	add	r22, r22
     4fe:	77 1f       	adc	r23, r23
     500:	8a 95       	dec	r24
     502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_WriteChannel+0x7e>
     504:	cb 01       	movw	r24, r22
     506:	80 95       	com	r24
     508:	84 23       	and	r24, r20
     50a:	88 bb       	out	0x18, r24	; 24
     50c:	08 95       	ret
     50e:	61 30       	cpi	r22, 0x01	; 1
     510:	69 f4       	brne	.+26     	; 0x52c <DIO_WriteChannel+0xae>
     512:	45 b3       	in	r20, 0x15	; 21
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	b9 01       	movw	r22, r18
     51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_WriteChannel+0xa2>
     51c:	66 0f       	add	r22, r22
     51e:	77 1f       	adc	r23, r23
     520:	8a 95       	dec	r24
     522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_WriteChannel+0x9e>
     524:	cb 01       	movw	r24, r22
     526:	84 2b       	or	r24, r20
     528:	85 bb       	out	0x15, r24	; 21
     52a:	08 95       	ret
     52c:	45 b3       	in	r20, 0x15	; 21
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	b9 01       	movw	r22, r18
     534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_WriteChannel+0xbc>
     536:	66 0f       	add	r22, r22
     538:	77 1f       	adc	r23, r23
     53a:	8a 95       	dec	r24
     53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_WriteChannel+0xb8>
     53e:	cb 01       	movw	r24, r22
     540:	80 95       	com	r24
     542:	84 23       	and	r24, r20
     544:	85 bb       	out	0x15, r24	; 21
     546:	08 95       	ret
     548:	61 30       	cpi	r22, 0x01	; 1
     54a:	69 f4       	brne	.+26     	; 0x566 <DIO_WriteChannel+0xe8>
     54c:	42 b3       	in	r20, 0x12	; 18
     54e:	21 e0       	ldi	r18, 0x01	; 1
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	b9 01       	movw	r22, r18
     554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_WriteChannel+0xdc>
     556:	66 0f       	add	r22, r22
     558:	77 1f       	adc	r23, r23
     55a:	8a 95       	dec	r24
     55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_WriteChannel+0xd8>
     55e:	cb 01       	movw	r24, r22
     560:	84 2b       	or	r24, r20
     562:	82 bb       	out	0x12, r24	; 18
     564:	08 95       	ret
     566:	42 b3       	in	r20, 0x12	; 18
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	b9 01       	movw	r22, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_WriteChannel+0xf6>
     570:	66 0f       	add	r22, r22
     572:	77 1f       	adc	r23, r23
     574:	8a 95       	dec	r24
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_WriteChannel+0xf2>
     578:	cb 01       	movw	r24, r22
     57a:	80 95       	com	r24
     57c:	84 23       	and	r24, r20
     57e:	82 bb       	out	0x12, r24	; 18
     580:	08 95       	ret

00000582 <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
     582:	98 2f       	mov	r25, r24
     584:	96 95       	lsr	r25
     586:	96 95       	lsr	r25
     588:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = channelId%8;
     58a:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
     58c:	91 30       	cpi	r25, 0x01	; 1
     58e:	21 f1       	breq	.+72     	; 0x5d8 <DIO_ConfigChannel+0x56>
     590:	30 f0       	brcs	.+12     	; 0x59e <DIO_ConfigChannel+0x1c>
     592:	92 30       	cpi	r25, 0x02	; 2
     594:	f1 f1       	breq	.+124    	; 0x612 <DIO_ConfigChannel+0x90>
     596:	93 30       	cpi	r25, 0x03	; 3
     598:	09 f4       	brne	.+2      	; 0x59c <DIO_ConfigChannel+0x1a>
     59a:	58 c0       	rjmp	.+176    	; 0x64c <DIO_ConfigChannel+0xca>
     59c:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
     59e:	61 30       	cpi	r22, 0x01	; 1
     5a0:	69 f4       	brne	.+26     	; 0x5bc <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
     5a2:	4a b3       	in	r20, 0x1a	; 26
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	b9 01       	movw	r22, r18
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_ConfigChannel+0x2e>
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	8a 95       	dec	r24
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_ConfigChannel+0x2a>
     5b4:	cb 01       	movw	r24, r22
     5b6:	84 2b       	or	r24, r20
     5b8:	8a bb       	out	0x1a, r24	; 26
     5ba:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
     5bc:	4a b3       	in	r20, 0x1a	; 26
     5be:	21 e0       	ldi	r18, 0x01	; 1
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	b9 01       	movw	r22, r18
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_ConfigChannel+0x48>
     5c6:	66 0f       	add	r22, r22
     5c8:	77 1f       	adc	r23, r23
     5ca:	8a 95       	dec	r24
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_ConfigChannel+0x44>
     5ce:	cb 01       	movw	r24, r22
     5d0:	80 95       	com	r24
     5d2:	84 23       	and	r24, r20
     5d4:	8a bb       	out	0x1a, r24	; 26
     5d6:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
     5d8:	61 30       	cpi	r22, 0x01	; 1
     5da:	69 f4       	brne	.+26     	; 0x5f6 <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
     5dc:	47 b3       	in	r20, 0x17	; 23
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_ConfigChannel+0x68>
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	8a 95       	dec	r24
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_ConfigChannel+0x64>
     5ee:	cb 01       	movw	r24, r22
     5f0:	84 2b       	or	r24, r20
     5f2:	87 bb       	out	0x17, r24	; 23
     5f4:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
     5f6:	47 b3       	in	r20, 0x17	; 23
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	b9 01       	movw	r22, r18
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_ConfigChannel+0x82>
     600:	66 0f       	add	r22, r22
     602:	77 1f       	adc	r23, r23
     604:	8a 95       	dec	r24
     606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_ConfigChannel+0x7e>
     608:	cb 01       	movw	r24, r22
     60a:	80 95       	com	r24
     60c:	84 23       	and	r24, r20
     60e:	87 bb       	out	0x17, r24	; 23
     610:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
     612:	61 30       	cpi	r22, 0x01	; 1
     614:	69 f4       	brne	.+26     	; 0x630 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
     616:	44 b3       	in	r20, 0x14	; 20
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	b9 01       	movw	r22, r18
     61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_ConfigChannel+0xa2>
     620:	66 0f       	add	r22, r22
     622:	77 1f       	adc	r23, r23
     624:	8a 95       	dec	r24
     626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_ConfigChannel+0x9e>
     628:	cb 01       	movw	r24, r22
     62a:	84 2b       	or	r24, r20
     62c:	84 bb       	out	0x14, r24	; 20
     62e:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
     630:	44 b3       	in	r20, 0x14	; 20
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	b9 01       	movw	r22, r18
     638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_ConfigChannel+0xbc>
     63a:	66 0f       	add	r22, r22
     63c:	77 1f       	adc	r23, r23
     63e:	8a 95       	dec	r24
     640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_ConfigChannel+0xb8>
     642:	cb 01       	movw	r24, r22
     644:	80 95       	com	r24
     646:	84 23       	and	r24, r20
     648:	84 bb       	out	0x14, r24	; 20
     64a:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
     64c:	61 30       	cpi	r22, 0x01	; 1
     64e:	69 f4       	brne	.+26     	; 0x66a <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
     650:	41 b3       	in	r20, 0x11	; 17
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	b9 01       	movw	r22, r18
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_ConfigChannel+0xdc>
     65a:	66 0f       	add	r22, r22
     65c:	77 1f       	adc	r23, r23
     65e:	8a 95       	dec	r24
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_ConfigChannel+0xd8>
     662:	cb 01       	movw	r24, r22
     664:	84 2b       	or	r24, r20
     666:	81 bb       	out	0x11, r24	; 17
     668:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
     66a:	41 b3       	in	r20, 0x11	; 17
     66c:	21 e0       	ldi	r18, 0x01	; 1
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	b9 01       	movw	r22, r18
     672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_ConfigChannel+0xf6>
     674:	66 0f       	add	r22, r22
     676:	77 1f       	adc	r23, r23
     678:	8a 95       	dec	r24
     67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_ConfigChannel+0xf2>
     67c:	cb 01       	movw	r24, r22
     67e:	80 95       	com	r24
     680:	84 23       	and	r24, r20
     682:	81 bb       	out	0x11, r24	; 17
     684:	08 95       	ret

00000686 <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	41 f0       	breq	.+16     	; 0x69a <DIO_ReadPort+0x14>
     68a:	28 f0       	brcs	.+10     	; 0x696 <DIO_ReadPort+0x10>
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	39 f0       	breq	.+14     	; 0x69e <DIO_ReadPort+0x18>
     690:	83 30       	cpi	r24, 0x03	; 3
     692:	39 f0       	breq	.+14     	; 0x6a2 <DIO_ReadPort+0x1c>
     694:	08 c0       	rjmp	.+16     	; 0x6a6 <DIO_ReadPort+0x20>
		case DIO_PortA:
		portValue = PORTA_Reg;
     696:	8b b3       	in	r24, 0x1b	; 27
		break;
     698:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
     69a:	88 b3       	in	r24, 0x18	; 24
		break;
     69c:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
     69e:	85 b3       	in	r24, 0x15	; 21
		break;
     6a0:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
     6a2:	82 b3       	in	r24, 0x12	; 18
		break;
     6a4:	08 95       	ret
		}
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
     6a6:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
     6a8:	08 95       	ret

000006aa <DIO_WritePort>:
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	41 f0       	breq	.+16     	; 0x6be <DIO_WritePort+0x14>
     6ae:	28 f0       	brcs	.+10     	; 0x6ba <DIO_WritePort+0x10>
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	39 f0       	breq	.+14     	; 0x6c2 <DIO_WritePort+0x18>
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	39 f0       	breq	.+14     	; 0x6c6 <DIO_WritePort+0x1c>
     6b8:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
     6ba:	6b bb       	out	0x1b, r22	; 27
		break;
     6bc:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
     6be:	68 bb       	out	0x18, r22	; 24
		break;
     6c0:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
     6c2:	65 bb       	out	0x15, r22	; 21
		break;
     6c4:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
     6c6:	62 bb       	out	0x12, r22	; 18
     6c8:	08 95       	ret

000006ca <DIO_Init>:

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	a0 c0       	rjmp	.+320    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	{
		Portx = count/8;
     6ce:	98 2f       	mov	r25, r24
     6d0:	96 95       	lsr	r25
     6d2:	96 95       	lsr	r25
     6d4:	96 95       	lsr	r25
		BitNo = count%8;
     6d6:	28 2f       	mov	r18, r24
     6d8:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
     6da:	91 30       	cpi	r25, 0x01	; 1
     6dc:	61 f1       	breq	.+88     	; 0x736 <DIO_Init+0x6c>
     6de:	38 f0       	brcs	.+14     	; 0x6ee <DIO_Init+0x24>
     6e0:	92 30       	cpi	r25, 0x02	; 2
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <DIO_Init+0x1c>
     6e4:	4c c0       	rjmp	.+152    	; 0x77e <DIO_Init+0xb4>
     6e6:	93 30       	cpi	r25, 0x03	; 3
     6e8:	09 f4       	brne	.+2      	; 0x6ec <DIO_Init+0x22>
     6ea:	6d c0       	rjmp	.+218    	; 0x7c6 <DIO_Init+0xfc>
     6ec:	8f c0       	rjmp	.+286    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
     6ee:	e8 2f       	mov	r30, r24
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ee 0f       	add	r30, r30
     6f4:	ff 1f       	adc	r31, r31
     6f6:	e0 5a       	subi	r30, 0xA0	; 160
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	90 81       	ld	r25, Z
     6fc:	91 30       	cpi	r25, 0x01	; 1
     6fe:	69 f4       	brne	.+26     	; 0x71a <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
     700:	9a b3       	in	r25, 0x1a	; 26
     702:	41 e0       	ldi	r20, 0x01	; 1
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	ba 01       	movw	r22, r20
     708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_Init+0x44>
     70a:	66 0f       	add	r22, r22
     70c:	77 1f       	adc	r23, r23
     70e:	2a 95       	dec	r18
     710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_Init+0x40>
     712:	9b 01       	movw	r18, r22
     714:	29 2b       	or	r18, r25
     716:	2a bb       	out	0x1a, r18	; 26
     718:	79 c0       	rjmp	.+242    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
     71a:	9a b3       	in	r25, 0x1a	; 26
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	ba 01       	movw	r22, r20
     722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_Init+0x5e>
     724:	66 0f       	add	r22, r22
     726:	77 1f       	adc	r23, r23
     728:	2a 95       	dec	r18
     72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_Init+0x5a>
     72c:	9b 01       	movw	r18, r22
     72e:	20 95       	com	r18
     730:	29 23       	and	r18, r25
     732:	2a bb       	out	0x1a, r18	; 26
     734:	6b c0       	rjmp	.+214    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
     736:	e8 2f       	mov	r30, r24
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	e0 5a       	subi	r30, 0xA0	; 160
     740:	ff 4f       	sbci	r31, 0xFF	; 255
     742:	90 81       	ld	r25, Z
     744:	91 30       	cpi	r25, 0x01	; 1
     746:	69 f4       	brne	.+26     	; 0x762 <DIO_Init+0x98>
			{
				SetBit(DDRB_Reg,BitNo);
     748:	97 b3       	in	r25, 0x17	; 23
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	ba 01       	movw	r22, r20
     750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_Init+0x8c>
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	2a 95       	dec	r18
     758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_Init+0x88>
     75a:	9b 01       	movw	r18, r22
     75c:	29 2b       	or	r18, r25
     75e:	27 bb       	out	0x17, r18	; 23
     760:	55 c0       	rjmp	.+170    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
     762:	97 b3       	in	r25, 0x17	; 23
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	ba 01       	movw	r22, r20
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_Init+0xa6>
     76c:	66 0f       	add	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	2a 95       	dec	r18
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_Init+0xa2>
     774:	9b 01       	movw	r18, r22
     776:	20 95       	com	r18
     778:	29 23       	and	r18, r25
     77a:	27 bb       	out	0x17, r18	; 23
     77c:	47 c0       	rjmp	.+142    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
     77e:	e8 2f       	mov	r30, r24
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	e0 5a       	subi	r30, 0xA0	; 160
     788:	ff 4f       	sbci	r31, 0xFF	; 255
     78a:	90 81       	ld	r25, Z
     78c:	91 30       	cpi	r25, 0x01	; 1
     78e:	69 f4       	brne	.+26     	; 0x7aa <DIO_Init+0xe0>
			{
				SetBit(DDRC_Reg,BitNo);
     790:	94 b3       	in	r25, 0x14	; 20
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	ba 01       	movw	r22, r20
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_Init+0xd4>
     79a:	66 0f       	add	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	2a 95       	dec	r18
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_Init+0xd0>
     7a2:	9b 01       	movw	r18, r22
     7a4:	29 2b       	or	r18, r25
     7a6:	24 bb       	out	0x14, r18	; 20
     7a8:	31 c0       	rjmp	.+98     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
     7aa:	94 b3       	in	r25, 0x14	; 20
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	ba 01       	movw	r22, r20
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_Init+0xee>
     7b4:	66 0f       	add	r22, r22
     7b6:	77 1f       	adc	r23, r23
     7b8:	2a 95       	dec	r18
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_Init+0xea>
     7bc:	9b 01       	movw	r18, r22
     7be:	20 95       	com	r18
     7c0:	29 23       	and	r18, r25
     7c2:	24 bb       	out	0x14, r18	; 20
     7c4:	23 c0       	rjmp	.+70     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
     7c6:	e8 2f       	mov	r30, r24
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e0 5a       	subi	r30, 0xA0	; 160
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	90 81       	ld	r25, Z
     7d4:	91 30       	cpi	r25, 0x01	; 1
     7d6:	69 f4       	brne	.+26     	; 0x7f2 <DIO_Init+0x128>
			{
				SetBit(DDRD_Reg,BitNo);
     7d8:	91 b3       	in	r25, 0x11	; 17
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	ba 01       	movw	r22, r20
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_Init+0x11c>
     7e2:	66 0f       	add	r22, r22
     7e4:	77 1f       	adc	r23, r23
     7e6:	2a 95       	dec	r18
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_Init+0x118>
     7ea:	9b 01       	movw	r18, r22
     7ec:	29 2b       	or	r18, r25
     7ee:	21 bb       	out	0x11, r18	; 17
     7f0:	0d c0       	rjmp	.+26     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
     7f2:	91 b3       	in	r25, 0x11	; 17
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	ba 01       	movw	r22, r20
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	66 0f       	add	r22, r22
     7fe:	77 1f       	adc	r23, r23
     800:	2a 95       	dec	r18
     802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_Init+0x132>
     804:	9b 01       	movw	r18, r22
     806:	20 95       	com	r18
     808:	29 23       	and	r18, r25
     80a:	21 bb       	out	0x11, r18	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	80 32       	cpi	r24, 0x20	; 32
     810:	08 f4       	brcc	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	5d cf       	rjmp	.-326    	; 0x6ce <DIO_Init+0x4>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
     814:	08 95       	ret

00000816 <GINT_EnableAllInterrupts>:
 *  Author: user
 */ 
#include "GINT.h"

void GINT_EnableAllInterrupts(void){
	SetBit(GINT_SREG_Reg,GINT_SREG_IBit);
     816:	8f b7       	in	r24, 0x3f	; 63
     818:	80 68       	ori	r24, 0x80	; 128
     81a:	8f bf       	out	0x3f, r24	; 63
     81c:	08 95       	ret

0000081e <TIMER1_Init>:
}
void TIMER1_OCR1B_SetValue(u16 value){
	TIMER1_OCR1B_Reg = value;
}
void TIMER1_ICR_SetValue(u16 value){
	TIMER1_ICR1_Reg = value;
     81e:	fc 01       	movw	r30, r24
     820:	80 81       	ld	r24, Z
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	99 f0       	breq	.+38     	; 0x84c <TIMER1_Init+0x2e>
     826:	28 f0       	brcs	.+10     	; 0x832 <TIMER1_Init+0x14>
     828:	82 30       	cpi	r24, 0x02	; 2
     82a:	e9 f0       	breq	.+58     	; 0x866 <__stack+0x7>
     82c:	83 30       	cpi	r24, 0x03	; 3
     82e:	41 f1       	breq	.+80     	; 0x880 <__stack+0x21>
     830:	33 c0       	rjmp	.+102    	; 0x898 <__stack+0x39>
     832:	8f b5       	in	r24, 0x2f	; 47
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	8f bd       	out	0x2f, r24	; 47
     838:	8f b5       	in	r24, 0x2f	; 47
     83a:	8d 7f       	andi	r24, 0xFD	; 253
     83c:	8f bd       	out	0x2f, r24	; 47
     83e:	8e b5       	in	r24, 0x2e	; 46
     840:	87 7f       	andi	r24, 0xF7	; 247
     842:	8e bd       	out	0x2e, r24	; 46
     844:	8e b5       	in	r24, 0x2e	; 46
     846:	8f 7e       	andi	r24, 0xEF	; 239
     848:	8e bd       	out	0x2e, r24	; 46
     84a:	26 c0       	rjmp	.+76     	; 0x898 <__stack+0x39>
     84c:	8f b5       	in	r24, 0x2f	; 47
     84e:	8e 7f       	andi	r24, 0xFE	; 254
     850:	8f bd       	out	0x2f, r24	; 47
     852:	8f b5       	in	r24, 0x2f	; 47
     854:	8d 7f       	andi	r24, 0xFD	; 253
     856:	8f bd       	out	0x2f, r24	; 47
     858:	8e b5       	in	r24, 0x2e	; 46
     85a:	88 60       	ori	r24, 0x08	; 8
     85c:	8e bd       	out	0x2e, r24	; 46
     85e:	8e b5       	in	r24, 0x2e	; 46
     860:	8f 7e       	andi	r24, 0xEF	; 239
     862:	8e bd       	out	0x2e, r24	; 46
     864:	19 c0       	rjmp	.+50     	; 0x898 <__stack+0x39>
     866:	8f b5       	in	r24, 0x2f	; 47
     868:	8e 7f       	andi	r24, 0xFE	; 254
     86a:	8f bd       	out	0x2f, r24	; 47
     86c:	8f b5       	in	r24, 0x2f	; 47
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	8f bd       	out	0x2f, r24	; 47
     872:	8e b5       	in	r24, 0x2e	; 46
     874:	88 60       	ori	r24, 0x08	; 8
     876:	8e bd       	out	0x2e, r24	; 46
     878:	8e b5       	in	r24, 0x2e	; 46
     87a:	80 61       	ori	r24, 0x10	; 16
     87c:	8e bd       	out	0x2e, r24	; 46
     87e:	0c c0       	rjmp	.+24     	; 0x898 <__stack+0x39>
     880:	8f b5       	in	r24, 0x2f	; 47
     882:	8e 7f       	andi	r24, 0xFE	; 254
     884:	8f bd       	out	0x2f, r24	; 47
     886:	8f b5       	in	r24, 0x2f	; 47
     888:	82 60       	ori	r24, 0x02	; 2
     88a:	8f bd       	out	0x2f, r24	; 47
     88c:	8e b5       	in	r24, 0x2e	; 46
     88e:	87 7f       	andi	r24, 0xF7	; 247
     890:	8e bd       	out	0x2e, r24	; 46
     892:	8e b5       	in	r24, 0x2e	; 46
     894:	80 61       	ori	r24, 0x10	; 16
     896:	8e bd       	out	0x2e, r24	; 46
     898:	81 81       	ldd	r24, Z+1	; 0x01
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	01 f1       	breq	.+64     	; 0x8de <__stack+0x7f>
     89e:	28 f4       	brcc	.+10     	; 0x8aa <__stack+0x4b>
     8a0:	88 23       	and	r24, r24
     8a2:	49 f0       	breq	.+18     	; 0x8b6 <__stack+0x57>
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	89 f0       	breq	.+34     	; 0x8ca <__stack+0x6b>
     8a8:	41 c0       	rjmp	.+130    	; 0x92c <__stack+0xcd>
     8aa:	84 30       	cpi	r24, 0x04	; 4
     8ac:	61 f1       	breq	.+88     	; 0x906 <__stack+0xa7>
     8ae:	08 f1       	brcs	.+66     	; 0x8f2 <__stack+0x93>
     8b0:	85 30       	cpi	r24, 0x05	; 5
     8b2:	99 f1       	breq	.+102    	; 0x91a <__stack+0xbb>
     8b4:	3b c0       	rjmp	.+118    	; 0x92c <__stack+0xcd>
     8b6:	8e b5       	in	r24, 0x2e	; 46
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	8e bd       	out	0x2e, r24	; 46
     8bc:	8e b5       	in	r24, 0x2e	; 46
     8be:	8d 7f       	andi	r24, 0xFD	; 253
     8c0:	8e bd       	out	0x2e, r24	; 46
     8c2:	8e b5       	in	r24, 0x2e	; 46
     8c4:	8b 7f       	andi	r24, 0xFB	; 251
     8c6:	8e bd       	out	0x2e, r24	; 46
     8c8:	31 c0       	rjmp	.+98     	; 0x92c <__stack+0xcd>
     8ca:	8e b5       	in	r24, 0x2e	; 46
     8cc:	81 60       	ori	r24, 0x01	; 1
     8ce:	8e bd       	out	0x2e, r24	; 46
     8d0:	8e b5       	in	r24, 0x2e	; 46
     8d2:	8d 7f       	andi	r24, 0xFD	; 253
     8d4:	8e bd       	out	0x2e, r24	; 46
     8d6:	8e b5       	in	r24, 0x2e	; 46
     8d8:	8b 7f       	andi	r24, 0xFB	; 251
     8da:	8e bd       	out	0x2e, r24	; 46
     8dc:	27 c0       	rjmp	.+78     	; 0x92c <__stack+0xcd>
     8de:	8e b5       	in	r24, 0x2e	; 46
     8e0:	8e 7f       	andi	r24, 0xFE	; 254
     8e2:	8e bd       	out	0x2e, r24	; 46
     8e4:	8e b5       	in	r24, 0x2e	; 46
     8e6:	82 60       	ori	r24, 0x02	; 2
     8e8:	8e bd       	out	0x2e, r24	; 46
     8ea:	8e b5       	in	r24, 0x2e	; 46
     8ec:	8b 7f       	andi	r24, 0xFB	; 251
     8ee:	8e bd       	out	0x2e, r24	; 46
     8f0:	1d c0       	rjmp	.+58     	; 0x92c <__stack+0xcd>
     8f2:	8e b5       	in	r24, 0x2e	; 46
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	8e bd       	out	0x2e, r24	; 46
     8f8:	8e b5       	in	r24, 0x2e	; 46
     8fa:	82 60       	ori	r24, 0x02	; 2
     8fc:	8e bd       	out	0x2e, r24	; 46
     8fe:	8e b5       	in	r24, 0x2e	; 46
     900:	8b 7f       	andi	r24, 0xFB	; 251
     902:	8e bd       	out	0x2e, r24	; 46
     904:	13 c0       	rjmp	.+38     	; 0x92c <__stack+0xcd>
     906:	8e b5       	in	r24, 0x2e	; 46
     908:	8e 7f       	andi	r24, 0xFE	; 254
     90a:	8e bd       	out	0x2e, r24	; 46
     90c:	8e b5       	in	r24, 0x2e	; 46
     90e:	8d 7f       	andi	r24, 0xFD	; 253
     910:	8e bd       	out	0x2e, r24	; 46
     912:	8e b5       	in	r24, 0x2e	; 46
     914:	84 60       	ori	r24, 0x04	; 4
     916:	8e bd       	out	0x2e, r24	; 46
     918:	09 c0       	rjmp	.+18     	; 0x92c <__stack+0xcd>
     91a:	8e b5       	in	r24, 0x2e	; 46
     91c:	81 60       	ori	r24, 0x01	; 1
     91e:	8e bd       	out	0x2e, r24	; 46
     920:	8e b5       	in	r24, 0x2e	; 46
     922:	8d 7f       	andi	r24, 0xFD	; 253
     924:	8e bd       	out	0x2e, r24	; 46
     926:	8e b5       	in	r24, 0x2e	; 46
     928:	84 60       	ori	r24, 0x04	; 4
     92a:	8e bd       	out	0x2e, r24	; 46
     92c:	82 81       	ldd	r24, Z+2	; 0x02
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	59 f0       	breq	.+22     	; 0x948 <__stack+0xe9>
     932:	83 30       	cpi	r24, 0x03	; 3
     934:	81 f0       	breq	.+32     	; 0x956 <__stack+0xf7>
     936:	81 11       	cpse	r24, r1
     938:	14 c0       	rjmp	.+40     	; 0x962 <__stack+0x103>
     93a:	8f b5       	in	r24, 0x2f	; 47
     93c:	8f 7b       	andi	r24, 0xBF	; 191
     93e:	8f bd       	out	0x2f, r24	; 47
     940:	8f b5       	in	r24, 0x2f	; 47
     942:	8f 77       	andi	r24, 0x7F	; 127
     944:	8f bd       	out	0x2f, r24	; 47
     946:	0d c0       	rjmp	.+26     	; 0x962 <__stack+0x103>
     948:	8f b5       	in	r24, 0x2f	; 47
     94a:	8f 7b       	andi	r24, 0xBF	; 191
     94c:	8f bd       	out	0x2f, r24	; 47
     94e:	8f b5       	in	r24, 0x2f	; 47
     950:	80 68       	ori	r24, 0x80	; 128
     952:	8f bd       	out	0x2f, r24	; 47
     954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x103>
     956:	8f b5       	in	r24, 0x2f	; 47
     958:	80 64       	ori	r24, 0x40	; 64
     95a:	8f bd       	out	0x2f, r24	; 47
     95c:	8f b5       	in	r24, 0x2f	; 47
     95e:	80 68       	ori	r24, 0x80	; 128
     960:	8f bd       	out	0x2f, r24	; 47
     962:	29 b7       	in	r18, 0x39	; 57
     964:	97 81       	ldd	r25, Z+7	; 0x07
     966:	89 2f       	mov	r24, r25
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	82 2b       	or	r24, r18
     974:	89 bf       	out	0x39, r24	; 57
     976:	08 95       	ret

00000978 <TIMER1_TOVInt_SetCallBack>:
     978:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <Timer1TovIntFunPtr+0x1>
     97c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <Timer1TovIntFunPtr>
     980:	08 95       	ret

00000982 <__vector_8>:

//ISR(TIMER1_COMPA_vect){
//	Timer1Oc1aIntFunPtr();
//}

ISR(TIMER1_COMPB_vect){
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
	Timer1Oc1bIntFunPtr();
     9a4:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Timer1Oc1bIntFunPtr>
     9a8:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Timer1Oc1bIntFunPtr+0x1>
     9ac:	09 95       	icall
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <__vector_9>:

ISR(TIMER1_OVF_vect){
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
	Timer1TovIntFunPtr();
     9f2:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Timer1TovIntFunPtr>
     9f6:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Timer1TovIntFunPtr+0x1>
     9fa:	09 95       	icall
}
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__floatunsisf>:
     a1e:	e8 94       	clt
     a20:	09 c0       	rjmp	.+18     	; 0xa34 <__floatsisf+0x12>

00000a22 <__floatsisf>:
     a22:	97 fb       	bst	r25, 7
     a24:	3e f4       	brtc	.+14     	; 0xa34 <__floatsisf+0x12>
     a26:	90 95       	com	r25
     a28:	80 95       	com	r24
     a2a:	70 95       	com	r23
     a2c:	61 95       	neg	r22
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	8f 4f       	sbci	r24, 0xFF	; 255
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	99 23       	and	r25, r25
     a36:	a9 f0       	breq	.+42     	; 0xa62 <__floatsisf+0x40>
     a38:	f9 2f       	mov	r31, r25
     a3a:	96 e9       	ldi	r25, 0x96	; 150
     a3c:	bb 27       	eor	r27, r27
     a3e:	93 95       	inc	r25
     a40:	f6 95       	lsr	r31
     a42:	87 95       	ror	r24
     a44:	77 95       	ror	r23
     a46:	67 95       	ror	r22
     a48:	b7 95       	ror	r27
     a4a:	f1 11       	cpse	r31, r1
     a4c:	f8 cf       	rjmp	.-16     	; 0xa3e <__floatsisf+0x1c>
     a4e:	fa f4       	brpl	.+62     	; 0xa8e <__floatsisf+0x6c>
     a50:	bb 0f       	add	r27, r27
     a52:	11 f4       	brne	.+4      	; 0xa58 <__floatsisf+0x36>
     a54:	60 ff       	sbrs	r22, 0
     a56:	1b c0       	rjmp	.+54     	; 0xa8e <__floatsisf+0x6c>
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	8f 4f       	sbci	r24, 0xFF	; 255
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	16 c0       	rjmp	.+44     	; 0xa8e <__floatsisf+0x6c>
     a62:	88 23       	and	r24, r24
     a64:	11 f0       	breq	.+4      	; 0xa6a <__floatsisf+0x48>
     a66:	96 e9       	ldi	r25, 0x96	; 150
     a68:	11 c0       	rjmp	.+34     	; 0xa8c <__floatsisf+0x6a>
     a6a:	77 23       	and	r23, r23
     a6c:	21 f0       	breq	.+8      	; 0xa76 <__floatsisf+0x54>
     a6e:	9e e8       	ldi	r25, 0x8E	; 142
     a70:	87 2f       	mov	r24, r23
     a72:	76 2f       	mov	r23, r22
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__floatsisf+0x5e>
     a76:	66 23       	and	r22, r22
     a78:	71 f0       	breq	.+28     	; 0xa96 <__floatsisf+0x74>
     a7a:	96 e8       	ldi	r25, 0x86	; 134
     a7c:	86 2f       	mov	r24, r22
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	2a f0       	brmi	.+10     	; 0xa8e <__floatsisf+0x6c>
     a84:	9a 95       	dec	r25
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	88 1f       	adc	r24, r24
     a8c:	da f7       	brpl	.-10     	; 0xa84 <__floatsisf+0x62>
     a8e:	88 0f       	add	r24, r24
     a90:	96 95       	lsr	r25
     a92:	87 95       	ror	r24
     a94:	97 f9       	bld	r25, 7
     a96:	08 95       	ret

00000a98 <__mulsf3>:
     a98:	0e 94 5f 05 	call	0xabe	; 0xabe <__mulsf3x>
     a9c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__fp_round>
     aa0:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fp_pscA>
     aa4:	38 f0       	brcs	.+14     	; 0xab4 <__mulsf3+0x1c>
     aa6:	0e 94 c9 05 	call	0xb92	; 0xb92 <__fp_pscB>
     aaa:	20 f0       	brcs	.+8      	; 0xab4 <__mulsf3+0x1c>
     aac:	95 23       	and	r25, r21
     aae:	11 f0       	breq	.+4      	; 0xab4 <__mulsf3+0x1c>
     ab0:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_inf>
     ab4:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_nan>
     ab8:	11 24       	eor	r1, r1
     aba:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_szero>

00000abe <__mulsf3x>:
     abe:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_split3>
     ac2:	70 f3       	brcs	.-36     	; 0xaa0 <__mulsf3+0x8>

00000ac4 <__mulsf3_pse>:
     ac4:	95 9f       	mul	r25, r21
     ac6:	c1 f3       	breq	.-16     	; 0xab8 <__mulsf3+0x20>
     ac8:	95 0f       	add	r25, r21
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	55 1f       	adc	r21, r21
     ace:	62 9f       	mul	r22, r18
     ad0:	f0 01       	movw	r30, r0
     ad2:	72 9f       	mul	r23, r18
     ad4:	bb 27       	eor	r27, r27
     ad6:	f0 0d       	add	r31, r0
     ad8:	b1 1d       	adc	r27, r1
     ada:	63 9f       	mul	r22, r19
     adc:	aa 27       	eor	r26, r26
     ade:	f0 0d       	add	r31, r0
     ae0:	b1 1d       	adc	r27, r1
     ae2:	aa 1f       	adc	r26, r26
     ae4:	64 9f       	mul	r22, r20
     ae6:	66 27       	eor	r22, r22
     ae8:	b0 0d       	add	r27, r0
     aea:	a1 1d       	adc	r26, r1
     aec:	66 1f       	adc	r22, r22
     aee:	82 9f       	mul	r24, r18
     af0:	22 27       	eor	r18, r18
     af2:	b0 0d       	add	r27, r0
     af4:	a1 1d       	adc	r26, r1
     af6:	62 1f       	adc	r22, r18
     af8:	73 9f       	mul	r23, r19
     afa:	b0 0d       	add	r27, r0
     afc:	a1 1d       	adc	r26, r1
     afe:	62 1f       	adc	r22, r18
     b00:	83 9f       	mul	r24, r19
     b02:	a0 0d       	add	r26, r0
     b04:	61 1d       	adc	r22, r1
     b06:	22 1f       	adc	r18, r18
     b08:	74 9f       	mul	r23, r20
     b0a:	33 27       	eor	r19, r19
     b0c:	a0 0d       	add	r26, r0
     b0e:	61 1d       	adc	r22, r1
     b10:	23 1f       	adc	r18, r19
     b12:	84 9f       	mul	r24, r20
     b14:	60 0d       	add	r22, r0
     b16:	21 1d       	adc	r18, r1
     b18:	82 2f       	mov	r24, r18
     b1a:	76 2f       	mov	r23, r22
     b1c:	6a 2f       	mov	r22, r26
     b1e:	11 24       	eor	r1, r1
     b20:	9f 57       	subi	r25, 0x7F	; 127
     b22:	50 40       	sbci	r21, 0x00	; 0
     b24:	9a f0       	brmi	.+38     	; 0xb4c <__mulsf3_pse+0x88>
     b26:	f1 f0       	breq	.+60     	; 0xb64 <__mulsf3_pse+0xa0>
     b28:	88 23       	and	r24, r24
     b2a:	4a f0       	brmi	.+18     	; 0xb3e <__mulsf3_pse+0x7a>
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	bb 1f       	adc	r27, r27
     b32:	66 1f       	adc	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	91 50       	subi	r25, 0x01	; 1
     b3a:	50 40       	sbci	r21, 0x00	; 0
     b3c:	a9 f7       	brne	.-22     	; 0xb28 <__mulsf3_pse+0x64>
     b3e:	9e 3f       	cpi	r25, 0xFE	; 254
     b40:	51 05       	cpc	r21, r1
     b42:	80 f0       	brcs	.+32     	; 0xb64 <__mulsf3_pse+0xa0>
     b44:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_inf>
     b48:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_szero>
     b4c:	5f 3f       	cpi	r21, 0xFF	; 255
     b4e:	e4 f3       	brlt	.-8      	; 0xb48 <__mulsf3_pse+0x84>
     b50:	98 3e       	cpi	r25, 0xE8	; 232
     b52:	d4 f3       	brlt	.-12     	; 0xb48 <__mulsf3_pse+0x84>
     b54:	86 95       	lsr	r24
     b56:	77 95       	ror	r23
     b58:	67 95       	ror	r22
     b5a:	b7 95       	ror	r27
     b5c:	f7 95       	ror	r31
     b5e:	e7 95       	ror	r30
     b60:	9f 5f       	subi	r25, 0xFF	; 255
     b62:	c1 f7       	brne	.-16     	; 0xb54 <__mulsf3_pse+0x90>
     b64:	fe 2b       	or	r31, r30
     b66:	88 0f       	add	r24, r24
     b68:	91 1d       	adc	r25, r1
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	97 f9       	bld	r25, 7
     b70:	08 95       	ret

00000b72 <__fp_inf>:
     b72:	97 f9       	bld	r25, 7
     b74:	9f 67       	ori	r25, 0x7F	; 127
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	08 95       	ret

00000b7e <__fp_nan>:
     b7e:	9f ef       	ldi	r25, 0xFF	; 255
     b80:	80 ec       	ldi	r24, 0xC0	; 192
     b82:	08 95       	ret

00000b84 <__fp_pscA>:
     b84:	00 24       	eor	r0, r0
     b86:	0a 94       	dec	r0
     b88:	16 16       	cp	r1, r22
     b8a:	17 06       	cpc	r1, r23
     b8c:	18 06       	cpc	r1, r24
     b8e:	09 06       	cpc	r0, r25
     b90:	08 95       	ret

00000b92 <__fp_pscB>:
     b92:	00 24       	eor	r0, r0
     b94:	0a 94       	dec	r0
     b96:	12 16       	cp	r1, r18
     b98:	13 06       	cpc	r1, r19
     b9a:	14 06       	cpc	r1, r20
     b9c:	05 06       	cpc	r0, r21
     b9e:	08 95       	ret

00000ba0 <__fp_round>:
     ba0:	09 2e       	mov	r0, r25
     ba2:	03 94       	inc	r0
     ba4:	00 0c       	add	r0, r0
     ba6:	11 f4       	brne	.+4      	; 0xbac <__fp_round+0xc>
     ba8:	88 23       	and	r24, r24
     baa:	52 f0       	brmi	.+20     	; 0xbc0 <__fp_round+0x20>
     bac:	bb 0f       	add	r27, r27
     bae:	40 f4       	brcc	.+16     	; 0xbc0 <__fp_round+0x20>
     bb0:	bf 2b       	or	r27, r31
     bb2:	11 f4       	brne	.+4      	; 0xbb8 <__fp_round+0x18>
     bb4:	60 ff       	sbrs	r22, 0
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <__fp_round+0x20>
     bb8:	6f 5f       	subi	r22, 0xFF	; 255
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	8f 4f       	sbci	r24, 0xFF	; 255
     bbe:	9f 4f       	sbci	r25, 0xFF	; 255
     bc0:	08 95       	ret

00000bc2 <__fp_split3>:
     bc2:	57 fd       	sbrc	r21, 7
     bc4:	90 58       	subi	r25, 0x80	; 128
     bc6:	44 0f       	add	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	59 f0       	breq	.+22     	; 0xbe2 <__fp_splitA+0x10>
     bcc:	5f 3f       	cpi	r21, 0xFF	; 255
     bce:	71 f0       	breq	.+28     	; 0xbec <__fp_splitA+0x1a>
     bd0:	47 95       	ror	r20

00000bd2 <__fp_splitA>:
     bd2:	88 0f       	add	r24, r24
     bd4:	97 fb       	bst	r25, 7
     bd6:	99 1f       	adc	r25, r25
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <__fp_splitA+0x20>
     bda:	9f 3f       	cpi	r25, 0xFF	; 255
     bdc:	79 f0       	breq	.+30     	; 0xbfc <__fp_splitA+0x2a>
     bde:	87 95       	ror	r24
     be0:	08 95       	ret
     be2:	12 16       	cp	r1, r18
     be4:	13 06       	cpc	r1, r19
     be6:	14 06       	cpc	r1, r20
     be8:	55 1f       	adc	r21, r21
     bea:	f2 cf       	rjmp	.-28     	; 0xbd0 <__fp_split3+0xe>
     bec:	46 95       	lsr	r20
     bee:	f1 df       	rcall	.-30     	; 0xbd2 <__fp_splitA>
     bf0:	08 c0       	rjmp	.+16     	; 0xc02 <__fp_splitA+0x30>
     bf2:	16 16       	cp	r1, r22
     bf4:	17 06       	cpc	r1, r23
     bf6:	18 06       	cpc	r1, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	f1 cf       	rjmp	.-30     	; 0xbde <__fp_splitA+0xc>
     bfc:	86 95       	lsr	r24
     bfe:	71 05       	cpc	r23, r1
     c00:	61 05       	cpc	r22, r1
     c02:	08 94       	sec
     c04:	08 95       	ret

00000c06 <__fp_zero>:
     c06:	e8 94       	clt

00000c08 <__fp_szero>:
     c08:	bb 27       	eor	r27, r27
     c0a:	66 27       	eor	r22, r22
     c0c:	77 27       	eor	r23, r23
     c0e:	cb 01       	movw	r24, r22
     c10:	97 f9       	bld	r25, 7
     c12:	08 95       	ret

00000c14 <dtostrf>:
     c14:	ef 92       	push	r14
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	e8 01       	movw	r28, r16
     c20:	47 fd       	sbrc	r20, 7
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <dtostrf+0x14>
     c24:	34 e0       	ldi	r19, 0x04	; 4
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <dtostrf+0x16>
     c28:	34 e1       	ldi	r19, 0x14	; 20
     c2a:	04 2e       	mov	r0, r20
     c2c:	00 0c       	add	r0, r0
     c2e:	55 0b       	sbc	r21, r21
     c30:	57 ff       	sbrs	r21, 7
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <dtostrf+0x26>
     c34:	51 95       	neg	r21
     c36:	41 95       	neg	r20
     c38:	51 09       	sbc	r21, r1
     c3a:	e3 2e       	mov	r14, r19
     c3c:	02 2f       	mov	r16, r18
     c3e:	24 2f       	mov	r18, r20
     c40:	ae 01       	movw	r20, r28
     c42:	0e 94 2a 06 	call	0xc54	; 0xc54 <dtoa_prf>
     c46:	ce 01       	movw	r24, r28
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ef 90       	pop	r14
     c52:	08 95       	ret

00000c54 <dtoa_prf>:
     c54:	a9 e0       	ldi	r26, 0x09	; 9
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e0 e3       	ldi	r30, 0x30	; 48
     c5a:	f6 e0       	ldi	r31, 0x06	; 6
     c5c:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__prologue_saves__+0xc>
     c60:	6a 01       	movw	r12, r20
     c62:	12 2f       	mov	r17, r18
     c64:	b0 2e       	mov	r11, r16
     c66:	2b e3       	ldi	r18, 0x3B	; 59
     c68:	20 17       	cp	r18, r16
     c6a:	20 f0       	brcs	.+8      	; 0xc74 <dtoa_prf+0x20>
     c6c:	ff 24       	eor	r15, r15
     c6e:	f3 94       	inc	r15
     c70:	f0 0e       	add	r15, r16
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <dtoa_prf+0x24>
     c74:	2c e3       	ldi	r18, 0x3C	; 60
     c76:	f2 2e       	mov	r15, r18
     c78:	0f 2d       	mov	r16, r15
     c7a:	27 e0       	ldi	r18, 0x07	; 7
     c7c:	ae 01       	movw	r20, r28
     c7e:	4f 5f       	subi	r20, 0xFF	; 255
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
     c82:	0e 94 84 07 	call	0xf08	; 0xf08 <__ftoa_engine>
     c86:	bc 01       	movw	r22, r24
     c88:	49 81       	ldd	r20, Y+1	; 0x01
     c8a:	84 2f       	mov	r24, r20
     c8c:	89 70       	andi	r24, 0x09	; 9
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	31 f0       	breq	.+12     	; 0xc9e <dtoa_prf+0x4a>
     c92:	e1 fc       	sbrc	r14, 1
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <dtoa_prf+0x4e>
     c96:	e0 fe       	sbrs	r14, 0
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <dtoa_prf+0x52>
     c9a:	90 e2       	ldi	r25, 0x20	; 32
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <dtoa_prf+0x54>
     c9e:	9d e2       	ldi	r25, 0x2D	; 45
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <dtoa_prf+0x54>
     ca2:	9b e2       	ldi	r25, 0x2B	; 43
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <dtoa_prf+0x54>
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	5e 2d       	mov	r21, r14
     caa:	50 71       	andi	r21, 0x10	; 16
     cac:	43 ff       	sbrs	r20, 3
     cae:	3c c0       	rjmp	.+120    	; 0xd28 <dtoa_prf+0xd4>
     cb0:	91 11       	cpse	r25, r1
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <dtoa_prf+0x64>
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <dtoa_prf+0x66>
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	81 17       	cp	r24, r17
     cbc:	18 f4       	brcc	.+6      	; 0xcc4 <dtoa_prf+0x70>
     cbe:	21 2f       	mov	r18, r17
     cc0:	28 1b       	sub	r18, r24
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <dtoa_prf+0x72>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	51 11       	cpse	r21, r1
     cc8:	0b c0       	rjmp	.+22     	; 0xce0 <dtoa_prf+0x8c>
     cca:	f6 01       	movw	r30, r12
     ccc:	82 2f       	mov	r24, r18
     cce:	30 e2       	ldi	r19, 0x20	; 32
     cd0:	88 23       	and	r24, r24
     cd2:	19 f0       	breq	.+6      	; 0xcda <dtoa_prf+0x86>
     cd4:	31 93       	st	Z+, r19
     cd6:	81 50       	subi	r24, 0x01	; 1
     cd8:	fb cf       	rjmp	.-10     	; 0xcd0 <dtoa_prf+0x7c>
     cda:	c2 0e       	add	r12, r18
     cdc:	d1 1c       	adc	r13, r1
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	99 23       	and	r25, r25
     ce2:	29 f0       	breq	.+10     	; 0xcee <dtoa_prf+0x9a>
     ce4:	d6 01       	movw	r26, r12
     ce6:	9c 93       	st	X, r25
     ce8:	f6 01       	movw	r30, r12
     cea:	31 96       	adiw	r30, 0x01	; 1
     cec:	6f 01       	movw	r12, r30
     cee:	c6 01       	movw	r24, r12
     cf0:	03 96       	adiw	r24, 0x03	; 3
     cf2:	e2 fe       	sbrs	r14, 2
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <dtoa_prf+0xb6>
     cf6:	3e e4       	ldi	r19, 0x4E	; 78
     cf8:	d6 01       	movw	r26, r12
     cfa:	3c 93       	st	X, r19
     cfc:	41 e4       	ldi	r20, 0x41	; 65
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	4c 93       	st	X, r20
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	3c 93       	st	X, r19
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <dtoa_prf+0xc2>
     d0a:	3e e6       	ldi	r19, 0x6E	; 110
     d0c:	f6 01       	movw	r30, r12
     d0e:	30 83       	st	Z, r19
     d10:	41 e6       	ldi	r20, 0x61	; 97
     d12:	41 83       	std	Z+1, r20	; 0x01
     d14:	32 83       	std	Z+2, r19	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	32 2f       	mov	r19, r18
     d1a:	40 e2       	ldi	r20, 0x20	; 32
     d1c:	33 23       	and	r19, r19
     d1e:	09 f4       	brne	.+2      	; 0xd22 <dtoa_prf+0xce>
     d20:	42 c0       	rjmp	.+132    	; 0xda6 <dtoa_prf+0x152>
     d22:	41 93       	st	Z+, r20
     d24:	31 50       	subi	r19, 0x01	; 1
     d26:	fa cf       	rjmp	.-12     	; 0xd1c <dtoa_prf+0xc8>
     d28:	42 ff       	sbrs	r20, 2
     d2a:	44 c0       	rjmp	.+136    	; 0xdb4 <dtoa_prf+0x160>
     d2c:	91 11       	cpse	r25, r1
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <dtoa_prf+0xe0>
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <dtoa_prf+0xe2>
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	81 17       	cp	r24, r17
     d38:	18 f4       	brcc	.+6      	; 0xd40 <dtoa_prf+0xec>
     d3a:	21 2f       	mov	r18, r17
     d3c:	28 1b       	sub	r18, r24
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <dtoa_prf+0xee>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	51 11       	cpse	r21, r1
     d44:	0b c0       	rjmp	.+22     	; 0xd5c <dtoa_prf+0x108>
     d46:	f6 01       	movw	r30, r12
     d48:	82 2f       	mov	r24, r18
     d4a:	30 e2       	ldi	r19, 0x20	; 32
     d4c:	88 23       	and	r24, r24
     d4e:	19 f0       	breq	.+6      	; 0xd56 <dtoa_prf+0x102>
     d50:	31 93       	st	Z+, r19
     d52:	81 50       	subi	r24, 0x01	; 1
     d54:	fb cf       	rjmp	.-10     	; 0xd4c <dtoa_prf+0xf8>
     d56:	c2 0e       	add	r12, r18
     d58:	d1 1c       	adc	r13, r1
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	99 23       	and	r25, r25
     d5e:	29 f0       	breq	.+10     	; 0xd6a <dtoa_prf+0x116>
     d60:	d6 01       	movw	r26, r12
     d62:	9c 93       	st	X, r25
     d64:	f6 01       	movw	r30, r12
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	6f 01       	movw	r12, r30
     d6a:	c6 01       	movw	r24, r12
     d6c:	03 96       	adiw	r24, 0x03	; 3
     d6e:	e2 fe       	sbrs	r14, 2
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <dtoa_prf+0x134>
     d72:	39 e4       	ldi	r19, 0x49	; 73
     d74:	d6 01       	movw	r26, r12
     d76:	3c 93       	st	X, r19
     d78:	3e e4       	ldi	r19, 0x4E	; 78
     d7a:	11 96       	adiw	r26, 0x01	; 1
     d7c:	3c 93       	st	X, r19
     d7e:	11 97       	sbiw	r26, 0x01	; 1
     d80:	36 e4       	ldi	r19, 0x46	; 70
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	3c 93       	st	X, r19
     d86:	07 c0       	rjmp	.+14     	; 0xd96 <dtoa_prf+0x142>
     d88:	39 e6       	ldi	r19, 0x69	; 105
     d8a:	f6 01       	movw	r30, r12
     d8c:	30 83       	st	Z, r19
     d8e:	3e e6       	ldi	r19, 0x6E	; 110
     d90:	31 83       	std	Z+1, r19	; 0x01
     d92:	36 e6       	ldi	r19, 0x66	; 102
     d94:	32 83       	std	Z+2, r19	; 0x02
     d96:	fc 01       	movw	r30, r24
     d98:	32 2f       	mov	r19, r18
     d9a:	40 e2       	ldi	r20, 0x20	; 32
     d9c:	33 23       	and	r19, r19
     d9e:	19 f0       	breq	.+6      	; 0xda6 <dtoa_prf+0x152>
     da0:	41 93       	st	Z+, r20
     da2:	31 50       	subi	r19, 0x01	; 1
     da4:	fb cf       	rjmp	.-10     	; 0xd9c <dtoa_prf+0x148>
     da6:	fc 01       	movw	r30, r24
     da8:	e2 0f       	add	r30, r18
     daa:	f1 1d       	adc	r31, r1
     dac:	10 82       	st	Z, r1
     dae:	8e ef       	ldi	r24, 0xFE	; 254
     db0:	9f ef       	ldi	r25, 0xFF	; 255
     db2:	a6 c0       	rjmp	.+332    	; 0xf00 <dtoa_prf+0x2ac>
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	91 11       	cpse	r25, r1
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <dtoa_prf+0x16c>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	16 16       	cp	r1, r22
     dc2:	17 06       	cpc	r1, r23
     dc4:	1c f4       	brge	.+6      	; 0xdcc <dtoa_prf+0x178>
     dc6:	fb 01       	movw	r30, r22
     dc8:	31 96       	adiw	r30, 0x01	; 1
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <dtoa_prf+0x17c>
     dcc:	e1 e0       	ldi	r30, 0x01	; 1
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	2e 0f       	add	r18, r30
     dd2:	3f 1f       	adc	r19, r31
     dd4:	bb 20       	and	r11, r11
     dd6:	21 f0       	breq	.+8      	; 0xde0 <dtoa_prf+0x18c>
     dd8:	eb 2d       	mov	r30, r11
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	31 96       	adiw	r30, 0x01	; 1
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <dtoa_prf+0x190>
     de0:	e0 e0       	ldi	r30, 0x00	; 0
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	2e 0f       	add	r18, r30
     de6:	3f 1f       	adc	r19, r31
     de8:	e1 2f       	mov	r30, r17
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	2e 17       	cp	r18, r30
     dee:	3f 07       	cpc	r19, r31
     df0:	1c f4       	brge	.+6      	; 0xdf8 <dtoa_prf+0x1a4>
     df2:	12 1b       	sub	r17, r18
     df4:	21 2f       	mov	r18, r17
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <dtoa_prf+0x1a6>
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	8e 2d       	mov	r24, r14
     dfc:	88 71       	andi	r24, 0x18	; 24
     dfe:	59 f4       	brne	.+22     	; 0xe16 <dtoa_prf+0x1c2>
     e00:	f6 01       	movw	r30, r12
     e02:	82 2f       	mov	r24, r18
     e04:	30 e2       	ldi	r19, 0x20	; 32
     e06:	88 23       	and	r24, r24
     e08:	19 f0       	breq	.+6      	; 0xe10 <dtoa_prf+0x1bc>
     e0a:	31 93       	st	Z+, r19
     e0c:	81 50       	subi	r24, 0x01	; 1
     e0e:	fb cf       	rjmp	.-10     	; 0xe06 <dtoa_prf+0x1b2>
     e10:	c2 0e       	add	r12, r18
     e12:	d1 1c       	adc	r13, r1
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	99 23       	and	r25, r25
     e18:	29 f0       	breq	.+10     	; 0xe24 <dtoa_prf+0x1d0>
     e1a:	d6 01       	movw	r26, r12
     e1c:	9c 93       	st	X, r25
     e1e:	f6 01       	movw	r30, r12
     e20:	31 96       	adiw	r30, 0x01	; 1
     e22:	6f 01       	movw	r12, r30
     e24:	51 11       	cpse	r21, r1
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <dtoa_prf+0x1ea>
     e28:	f6 01       	movw	r30, r12
     e2a:	82 2f       	mov	r24, r18
     e2c:	90 e3       	ldi	r25, 0x30	; 48
     e2e:	88 23       	and	r24, r24
     e30:	19 f0       	breq	.+6      	; 0xe38 <dtoa_prf+0x1e4>
     e32:	91 93       	st	Z+, r25
     e34:	81 50       	subi	r24, 0x01	; 1
     e36:	fb cf       	rjmp	.-10     	; 0xe2e <dtoa_prf+0x1da>
     e38:	c2 0e       	add	r12, r18
     e3a:	d1 1c       	adc	r13, r1
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	0f 2d       	mov	r16, r15
     e40:	06 0f       	add	r16, r22
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	34 2f       	mov	r19, r20
     e46:	30 71       	andi	r19, 0x10	; 16
     e48:	44 ff       	sbrs	r20, 4
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <dtoa_prf+0x1fe>
     e4c:	91 33       	cpi	r25, 0x31	; 49
     e4e:	09 f4       	brne	.+2      	; 0xe52 <dtoa_prf+0x1fe>
     e50:	01 50       	subi	r16, 0x01	; 1
     e52:	10 16       	cp	r1, r16
     e54:	24 f4       	brge	.+8      	; 0xe5e <dtoa_prf+0x20a>
     e56:	09 30       	cpi	r16, 0x09	; 9
     e58:	18 f0       	brcs	.+6      	; 0xe60 <dtoa_prf+0x20c>
     e5a:	08 e0       	ldi	r16, 0x08	; 8
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <dtoa_prf+0x20c>
     e5e:	01 e0       	ldi	r16, 0x01	; 1
     e60:	ab 01       	movw	r20, r22
     e62:	77 ff       	sbrs	r23, 7
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <dtoa_prf+0x216>
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	fb 01       	movw	r30, r22
     e6c:	e4 1b       	sub	r30, r20
     e6e:	f5 0b       	sbc	r31, r21
     e70:	a1 e0       	ldi	r26, 0x01	; 1
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ac 0f       	add	r26, r28
     e76:	bd 1f       	adc	r27, r29
     e78:	ea 0f       	add	r30, r26
     e7a:	fb 1f       	adc	r31, r27
     e7c:	8e e2       	ldi	r24, 0x2E	; 46
     e7e:	a8 2e       	mov	r10, r24
     e80:	4b 01       	movw	r8, r22
     e82:	80 1a       	sub	r8, r16
     e84:	91 08       	sbc	r9, r1
     e86:	0b 2d       	mov	r16, r11
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	11 95       	neg	r17
     e8c:	01 95       	neg	r16
     e8e:	11 09       	sbc	r17, r1
     e90:	4f 3f       	cpi	r20, 0xFF	; 255
     e92:	bf ef       	ldi	r27, 0xFF	; 255
     e94:	5b 07       	cpc	r21, r27
     e96:	21 f4       	brne	.+8      	; 0xea0 <dtoa_prf+0x24c>
     e98:	d6 01       	movw	r26, r12
     e9a:	ac 92       	st	X, r10
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	6d 01       	movw	r12, r26
     ea0:	64 17       	cp	r22, r20
     ea2:	75 07       	cpc	r23, r21
     ea4:	2c f0       	brlt	.+10     	; 0xeb0 <dtoa_prf+0x25c>
     ea6:	84 16       	cp	r8, r20
     ea8:	95 06       	cpc	r9, r21
     eaa:	14 f4       	brge	.+4      	; 0xeb0 <dtoa_prf+0x25c>
     eac:	81 81       	ldd	r24, Z+1	; 0x01
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <dtoa_prf+0x25e>
     eb0:	80 e3       	ldi	r24, 0x30	; 48
     eb2:	41 50       	subi	r20, 0x01	; 1
     eb4:	51 09       	sbc	r21, r1
     eb6:	31 96       	adiw	r30, 0x01	; 1
     eb8:	d6 01       	movw	r26, r12
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	7d 01       	movw	r14, r26
     ebe:	40 17       	cp	r20, r16
     ec0:	51 07       	cpc	r21, r17
     ec2:	24 f0       	brlt	.+8      	; 0xecc <dtoa_prf+0x278>
     ec4:	d6 01       	movw	r26, r12
     ec6:	8c 93       	st	X, r24
     ec8:	67 01       	movw	r12, r14
     eca:	e2 cf       	rjmp	.-60     	; 0xe90 <dtoa_prf+0x23c>
     ecc:	64 17       	cp	r22, r20
     ece:	75 07       	cpc	r23, r21
     ed0:	39 f4       	brne	.+14     	; 0xee0 <dtoa_prf+0x28c>
     ed2:	96 33       	cpi	r25, 0x36	; 54
     ed4:	20 f4       	brcc	.+8      	; 0xede <dtoa_prf+0x28a>
     ed6:	95 33       	cpi	r25, 0x35	; 53
     ed8:	19 f4       	brne	.+6      	; 0xee0 <dtoa_prf+0x28c>
     eda:	31 11       	cpse	r19, r1
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <dtoa_prf+0x28c>
     ede:	81 e3       	ldi	r24, 0x31	; 49
     ee0:	f6 01       	movw	r30, r12
     ee2:	80 83       	st	Z, r24
     ee4:	f7 01       	movw	r30, r14
     ee6:	82 2f       	mov	r24, r18
     ee8:	90 e2       	ldi	r25, 0x20	; 32
     eea:	88 23       	and	r24, r24
     eec:	19 f0       	breq	.+6      	; 0xef4 <dtoa_prf+0x2a0>
     eee:	91 93       	st	Z+, r25
     ef0:	81 50       	subi	r24, 0x01	; 1
     ef2:	fb cf       	rjmp	.-10     	; 0xeea <dtoa_prf+0x296>
     ef4:	f7 01       	movw	r30, r14
     ef6:	e2 0f       	add	r30, r18
     ef8:	f1 1d       	adc	r31, r1
     efa:	10 82       	st	Z, r1
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	29 96       	adiw	r28, 0x09	; 9
     f02:	ec e0       	ldi	r30, 0x0C	; 12
     f04:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__epilogue_restores__+0xc>

00000f08 <__ftoa_engine>:
     f08:	28 30       	cpi	r18, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <__ftoa_engine+0x6>
     f0c:	27 e0       	ldi	r18, 0x07	; 7
     f0e:	33 27       	eor	r19, r19
     f10:	da 01       	movw	r26, r20
     f12:	99 0f       	add	r25, r25
     f14:	31 1d       	adc	r19, r1
     f16:	87 fd       	sbrc	r24, 7
     f18:	91 60       	ori	r25, 0x01	; 1
     f1a:	00 96       	adiw	r24, 0x00	; 0
     f1c:	61 05       	cpc	r22, r1
     f1e:	71 05       	cpc	r23, r1
     f20:	39 f4       	brne	.+14     	; 0xf30 <__ftoa_engine+0x28>
     f22:	32 60       	ori	r19, 0x02	; 2
     f24:	2e 5f       	subi	r18, 0xFE	; 254
     f26:	3d 93       	st	X+, r19
     f28:	30 e3       	ldi	r19, 0x30	; 48
     f2a:	2a 95       	dec	r18
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <__ftoa_engine+0x1e>
     f2e:	08 95       	ret
     f30:	9f 3f       	cpi	r25, 0xFF	; 255
     f32:	30 f0       	brcs	.+12     	; 0xf40 <__ftoa_engine+0x38>
     f34:	80 38       	cpi	r24, 0x80	; 128
     f36:	71 05       	cpc	r23, r1
     f38:	61 05       	cpc	r22, r1
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__ftoa_engine+0x36>
     f3c:	3c 5f       	subi	r19, 0xFC	; 252
     f3e:	3c 5f       	subi	r19, 0xFC	; 252
     f40:	3d 93       	st	X+, r19
     f42:	91 30       	cpi	r25, 0x01	; 1
     f44:	08 f0       	brcs	.+2      	; 0xf48 <__ftoa_engine+0x40>
     f46:	80 68       	ori	r24, 0x80	; 128
     f48:	91 1d       	adc	r25, r1
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	1f 93       	push	r17
     f50:	0f 93       	push	r16
     f52:	ff 92       	push	r15
     f54:	ef 92       	push	r14
     f56:	19 2f       	mov	r17, r25
     f58:	98 7f       	andi	r25, 0xF8	; 248
     f5a:	96 95       	lsr	r25
     f5c:	e9 2f       	mov	r30, r25
     f5e:	96 95       	lsr	r25
     f60:	96 95       	lsr	r25
     f62:	e9 0f       	add	r30, r25
     f64:	ff 27       	eor	r31, r31
     f66:	e2 55       	subi	r30, 0x52	; 82
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	99 27       	eor	r25, r25
     f6c:	33 27       	eor	r19, r19
     f6e:	ee 24       	eor	r14, r14
     f70:	ff 24       	eor	r15, r15
     f72:	a7 01       	movw	r20, r14
     f74:	e7 01       	movw	r28, r14
     f76:	05 90       	lpm	r0, Z+
     f78:	08 94       	sec
     f7a:	07 94       	ror	r0
     f7c:	28 f4       	brcc	.+10     	; 0xf88 <__ftoa_engine+0x80>
     f7e:	36 0f       	add	r19, r22
     f80:	e7 1e       	adc	r14, r23
     f82:	f8 1e       	adc	r15, r24
     f84:	49 1f       	adc	r20, r25
     f86:	51 1d       	adc	r21, r1
     f88:	66 0f       	add	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	06 94       	lsr	r0
     f92:	a1 f7       	brne	.-24     	; 0xf7c <__ftoa_engine+0x74>
     f94:	05 90       	lpm	r0, Z+
     f96:	07 94       	ror	r0
     f98:	28 f4       	brcc	.+10     	; 0xfa4 <__ftoa_engine+0x9c>
     f9a:	e7 0e       	add	r14, r23
     f9c:	f8 1e       	adc	r15, r24
     f9e:	49 1f       	adc	r20, r25
     fa0:	56 1f       	adc	r21, r22
     fa2:	c1 1d       	adc	r28, r1
     fa4:	77 0f       	add	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	66 1f       	adc	r22, r22
     fac:	06 94       	lsr	r0
     fae:	a1 f7       	brne	.-24     	; 0xf98 <__ftoa_engine+0x90>
     fb0:	05 90       	lpm	r0, Z+
     fb2:	07 94       	ror	r0
     fb4:	28 f4       	brcc	.+10     	; 0xfc0 <__ftoa_engine+0xb8>
     fb6:	f8 0e       	add	r15, r24
     fb8:	49 1f       	adc	r20, r25
     fba:	56 1f       	adc	r21, r22
     fbc:	c7 1f       	adc	r28, r23
     fbe:	d1 1d       	adc	r29, r1
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	66 1f       	adc	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	06 94       	lsr	r0
     fca:	a1 f7       	brne	.-24     	; 0xfb4 <__ftoa_engine+0xac>
     fcc:	05 90       	lpm	r0, Z+
     fce:	07 94       	ror	r0
     fd0:	20 f4       	brcc	.+8      	; 0xfda <__ftoa_engine+0xd2>
     fd2:	49 0f       	add	r20, r25
     fd4:	56 1f       	adc	r21, r22
     fd6:	c7 1f       	adc	r28, r23
     fd8:	d8 1f       	adc	r29, r24
     fda:	99 0f       	add	r25, r25
     fdc:	66 1f       	adc	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	88 1f       	adc	r24, r24
     fe2:	06 94       	lsr	r0
     fe4:	a9 f7       	brne	.-22     	; 0xfd0 <__ftoa_engine+0xc8>
     fe6:	84 91       	lpm	r24, Z
     fe8:	10 95       	com	r17
     fea:	17 70       	andi	r17, 0x07	; 7
     fec:	41 f0       	breq	.+16     	; 0xffe <__ftoa_engine+0xf6>
     fee:	d6 95       	lsr	r29
     ff0:	c7 95       	ror	r28
     ff2:	57 95       	ror	r21
     ff4:	47 95       	ror	r20
     ff6:	f7 94       	ror	r15
     ff8:	e7 94       	ror	r14
     ffa:	1a 95       	dec	r17
     ffc:	c1 f7       	brne	.-16     	; 0xfee <__ftoa_engine+0xe6>
     ffe:	e4 e5       	ldi	r30, 0x54	; 84
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	68 94       	set
    1004:	15 90       	lpm	r1, Z+
    1006:	15 91       	lpm	r17, Z+
    1008:	35 91       	lpm	r19, Z+
    100a:	65 91       	lpm	r22, Z+
    100c:	95 91       	lpm	r25, Z+
    100e:	05 90       	lpm	r0, Z+
    1010:	7f e2       	ldi	r23, 0x2F	; 47
    1012:	73 95       	inc	r23
    1014:	e1 18       	sub	r14, r1
    1016:	f1 0a       	sbc	r15, r17
    1018:	43 0b       	sbc	r20, r19
    101a:	56 0b       	sbc	r21, r22
    101c:	c9 0b       	sbc	r28, r25
    101e:	d0 09       	sbc	r29, r0
    1020:	c0 f7       	brcc	.-16     	; 0x1012 <__ftoa_engine+0x10a>
    1022:	e1 0c       	add	r14, r1
    1024:	f1 1e       	adc	r15, r17
    1026:	43 1f       	adc	r20, r19
    1028:	56 1f       	adc	r21, r22
    102a:	c9 1f       	adc	r28, r25
    102c:	d0 1d       	adc	r29, r0
    102e:	7e f4       	brtc	.+30     	; 0x104e <__ftoa_engine+0x146>
    1030:	70 33       	cpi	r23, 0x30	; 48
    1032:	11 f4       	brne	.+4      	; 0x1038 <__ftoa_engine+0x130>
    1034:	8a 95       	dec	r24
    1036:	e6 cf       	rjmp	.-52     	; 0x1004 <__ftoa_engine+0xfc>
    1038:	e8 94       	clt
    103a:	01 50       	subi	r16, 0x01	; 1
    103c:	30 f0       	brcs	.+12     	; 0x104a <__ftoa_engine+0x142>
    103e:	08 0f       	add	r16, r24
    1040:	0a f4       	brpl	.+2      	; 0x1044 <__ftoa_engine+0x13c>
    1042:	00 27       	eor	r16, r16
    1044:	02 17       	cp	r16, r18
    1046:	08 f4       	brcc	.+2      	; 0x104a <__ftoa_engine+0x142>
    1048:	20 2f       	mov	r18, r16
    104a:	23 95       	inc	r18
    104c:	02 2f       	mov	r16, r18
    104e:	7a 33       	cpi	r23, 0x3A	; 58
    1050:	28 f0       	brcs	.+10     	; 0x105c <__ftoa_engine+0x154>
    1052:	79 e3       	ldi	r23, 0x39	; 57
    1054:	7d 93       	st	X+, r23
    1056:	2a 95       	dec	r18
    1058:	e9 f7       	brne	.-6      	; 0x1054 <__ftoa_engine+0x14c>
    105a:	10 c0       	rjmp	.+32     	; 0x107c <__ftoa_engine+0x174>
    105c:	7d 93       	st	X+, r23
    105e:	2a 95       	dec	r18
    1060:	89 f6       	brne	.-94     	; 0x1004 <__ftoa_engine+0xfc>
    1062:	06 94       	lsr	r0
    1064:	97 95       	ror	r25
    1066:	67 95       	ror	r22
    1068:	37 95       	ror	r19
    106a:	17 95       	ror	r17
    106c:	17 94       	ror	r1
    106e:	e1 18       	sub	r14, r1
    1070:	f1 0a       	sbc	r15, r17
    1072:	43 0b       	sbc	r20, r19
    1074:	56 0b       	sbc	r21, r22
    1076:	c9 0b       	sbc	r28, r25
    1078:	d0 09       	sbc	r29, r0
    107a:	98 f0       	brcs	.+38     	; 0x10a2 <__ftoa_engine+0x19a>
    107c:	23 95       	inc	r18
    107e:	7e 91       	ld	r23, -X
    1080:	73 95       	inc	r23
    1082:	7a 33       	cpi	r23, 0x3A	; 58
    1084:	08 f0       	brcs	.+2      	; 0x1088 <__ftoa_engine+0x180>
    1086:	70 e3       	ldi	r23, 0x30	; 48
    1088:	7c 93       	st	X, r23
    108a:	20 13       	cpse	r18, r16
    108c:	b8 f7       	brcc	.-18     	; 0x107c <__ftoa_engine+0x174>
    108e:	7e 91       	ld	r23, -X
    1090:	70 61       	ori	r23, 0x10	; 16
    1092:	7d 93       	st	X+, r23
    1094:	30 f0       	brcs	.+12     	; 0x10a2 <__ftoa_engine+0x19a>
    1096:	83 95       	inc	r24
    1098:	71 e3       	ldi	r23, 0x31	; 49
    109a:	7d 93       	st	X+, r23
    109c:	70 e3       	ldi	r23, 0x30	; 48
    109e:	2a 95       	dec	r18
    10a0:	e1 f7       	brne	.-8      	; 0x109a <__ftoa_engine+0x192>
    10a2:	11 24       	eor	r1, r1
    10a4:	ef 90       	pop	r14
    10a6:	ff 90       	pop	r15
    10a8:	0f 91       	pop	r16
    10aa:	1f 91       	pop	r17
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	99 27       	eor	r25, r25
    10b2:	87 fd       	sbrc	r24, 7
    10b4:	90 95       	com	r25
    10b6:	08 95       	ret

000010b8 <__prologue_saves__>:
    10b8:	2f 92       	push	r2
    10ba:	3f 92       	push	r3
    10bc:	4f 92       	push	r4
    10be:	5f 92       	push	r5
    10c0:	6f 92       	push	r6
    10c2:	7f 92       	push	r7
    10c4:	8f 92       	push	r8
    10c6:	9f 92       	push	r9
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	ca 1b       	sub	r28, r26
    10e2:	db 0b       	sbc	r29, r27
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	09 94       	ijmp

000010f0 <__epilogue_restores__>:
    10f0:	2a 88       	ldd	r2, Y+18	; 0x12
    10f2:	39 88       	ldd	r3, Y+17	; 0x11
    10f4:	48 88       	ldd	r4, Y+16	; 0x10
    10f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    10f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    10fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    10fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    10fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1100:	aa 84       	ldd	r10, Y+10	; 0x0a
    1102:	b9 84       	ldd	r11, Y+9	; 0x09
    1104:	c8 84       	ldd	r12, Y+8	; 0x08
    1106:	df 80       	ldd	r13, Y+7	; 0x07
    1108:	ee 80       	ldd	r14, Y+6	; 0x06
    110a:	fd 80       	ldd	r15, Y+5	; 0x05
    110c:	0c 81       	ldd	r16, Y+4	; 0x04
    110e:	1b 81       	ldd	r17, Y+3	; 0x03
    1110:	aa 81       	ldd	r26, Y+2	; 0x02
    1112:	b9 81       	ldd	r27, Y+1	; 0x01
    1114:	ce 0f       	add	r28, r30
    1116:	d1 1d       	adc	r29, r1
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	ed 01       	movw	r28, r26
    1124:	08 95       	ret

00001126 <_exit>:
    1126:	f8 94       	cli

00001128 <__stop_program>:
    1128:	ff cf       	rjmp	.-2      	; 0x1128 <__stop_program>
